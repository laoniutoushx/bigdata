/*
 * This file is generated by jOOQ.
 */
package sos.haruhi.dbframe.jooq.tables.daos;


import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import sos.haruhi.dbframe.jooq.tables.GatherReport;
import sos.haruhi.dbframe.jooq.tables.records.GatherReportRecord;

import java.time.LocalDateTime;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class GatherReportDao extends DAOImpl<GatherReportRecord, sos.haruhi.dbframe.jooq.tables.pojos.GatherReport, String> {

    /**
     * Create a new GatherReportDao without any configuration
     */
    public GatherReportDao() {
        super(GatherReport.GATHER_REPORT, sos.haruhi.dbframe.jooq.tables.pojos.GatherReport.class);
    }

    /**
     * Create a new GatherReportDao with an attached configuration
     */
    @Autowired
    public GatherReportDao(Configuration configuration) {
        super(GatherReport.GATHER_REPORT, sos.haruhi.dbframe.jooq.tables.pojos.GatherReport.class, configuration);
    }

    @Override
    public String getId(sos.haruhi.dbframe.jooq.tables.pojos.GatherReport object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
        return fetchRange(GatherReport.GATHER_REPORT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchById(String... values) {
        return fetch(GatherReport.GATHER_REPORT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public sos.haruhi.dbframe.jooq.tables.pojos.GatherReport fetchOneById(String value) {
        return fetchOne(GatherReport.GATHER_REPORT.ID, value);
    }

    /**
     * Fetch records that have <code>call_number BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchRangeOfCallNumber(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(GatherReport.GATHER_REPORT.CALL_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>call_number IN (values)</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchByCallNumber(Integer... values) {
        return fetch(GatherReport.GATHER_REPORT.CALL_NUMBER, values);
    }

    /**
     * Fetch records that have <code>data_code BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchRangeOfDataCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(GatherReport.GATHER_REPORT.DATA_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>data_code IN (values)</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchByDataCode(String... values) {
        return fetch(GatherReport.GATHER_REPORT.DATA_CODE, values);
    }

    /**
     * Fetch records that have <code>data_count BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchRangeOfDataCount(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(GatherReport.GATHER_REPORT.DATA_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>data_count IN (values)</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchByDataCount(Long... values) {
        return fetch(GatherReport.GATHER_REPORT.DATA_COUNT, values);
    }

    /**
     * Fetch records that have <code>data_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchRangeOfDataName(String lowerInclusive, String upperInclusive) {
        return fetchRange(GatherReport.GATHER_REPORT.DATA_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>data_name IN (values)</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchByDataName(String... values) {
        return fetch(GatherReport.GATHER_REPORT.DATA_NAME, values);
    }

    /**
     * Fetch records that have <code>data_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchRangeOfDataType(String lowerInclusive, String upperInclusive) {
        return fetchRange(GatherReport.GATHER_REPORT.DATA_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>data_type IN (values)</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchByDataType(String... values) {
        return fetch(GatherReport.GATHER_REPORT.DATA_TYPE, values);
    }

    /**
     * Fetch records that have <code>device_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchRangeOfDeviceId(String lowerInclusive, String upperInclusive) {
        return fetchRange(GatherReport.GATHER_REPORT.DEVICE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>device_id IN (values)</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchByDeviceId(String... values) {
        return fetch(GatherReport.GATHER_REPORT.DEVICE_ID, values);
    }

    /**
     * Fetch records that have <code>gather_cycle BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchRangeOfGatherCycle(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(GatherReport.GATHER_REPORT.GATHER_CYCLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>gather_cycle IN (values)</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchByGatherCycle(Integer... values) {
        return fetch(GatherReport.GATHER_REPORT.GATHER_CYCLE, values);
    }

    /**
     * Fetch records that have <code>gather_ip BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchRangeOfGatherIp(String lowerInclusive, String upperInclusive) {
        return fetchRange(GatherReport.GATHER_REPORT.GATHER_IP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>gather_ip IN (values)</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchByGatherIp(String... values) {
        return fetch(GatherReport.GATHER_REPORT.GATHER_IP, values);
    }

    /**
     * Fetch records that have <code>last_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchRangeOfLastTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(GatherReport.GATHER_REPORT.LAST_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_time IN (values)</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchByLastTime(LocalDateTime... values) {
        return fetch(GatherReport.GATHER_REPORT.LAST_TIME, values);
    }

    /**
     * Fetch records that have <code>next_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchRangeOfNextTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(GatherReport.GATHER_REPORT.NEXT_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>next_time IN (values)</code>
     */
    public List<sos.haruhi.dbframe.jooq.tables.pojos.GatherReport> fetchByNextTime(LocalDateTime... values) {
        return fetch(GatherReport.GATHER_REPORT.NEXT_TIME, values);
    }
}
