/*
 * This file is generated by jOOQ.
 */
package sos.haruhi.dbframe.jooq.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import sos.haruhi.dbframe.jooq.Keys;
import sos.haruhi.dbframe.jooq.Public;
import sos.haruhi.dbframe.jooq.tables.records.ImpDataDetailRecord;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImpDataDetail extends TableImpl<ImpDataDetailRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.imp_data_detail</code>
     */
    public static final ImpDataDetail IMP_DATA_DETAIL = new ImpDataDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImpDataDetailRecord> getRecordType() {
        return ImpDataDetailRecord.class;
    }

    /**
     * The column <code>public.imp_data_detail.data_id</code>.
     */
    public final TableField<ImpDataDetailRecord, String> DATA_ID = createField(DSL.name("data_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.imp_data_detail.imp_name</code>.
     */
    public final TableField<ImpDataDetailRecord, String> IMP_NAME = createField(DSL.name("imp_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.imp_data_detail.imp_value</code>.
     */
    public final TableField<ImpDataDetailRecord, String> IMP_VALUE = createField(DSL.name("imp_value"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>public.imp_data_detail.logs_id</code>.
     */
    public final TableField<ImpDataDetailRecord, String> LOGS_ID = createField(DSL.name("logs_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.imp_data_detail.prop_id</code>.
     */
    public final TableField<ImpDataDetailRecord, String> PROP_ID = createField(DSL.name("prop_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.imp_data_detail.row_index</code>.
     */
    public final TableField<ImpDataDetailRecord, Integer> ROW_INDEX = createField(DSL.name("row_index"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.imp_data_detail.valid_state</code>.
     */
    public final TableField<ImpDataDetailRecord, Short> VALID_STATE = createField(DSL.name("valid_state"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.imp_data_detail.value_unit</code>.
     */
    public final TableField<ImpDataDetailRecord, String> VALUE_UNIT = createField(DSL.name("value_unit"), SQLDataType.VARCHAR(255), this, "");

    private ImpDataDetail(Name alias, Table<ImpDataDetailRecord> aliased) {
        this(alias, aliased, null);
    }

    private ImpDataDetail(Name alias, Table<ImpDataDetailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.imp_data_detail</code> table reference
     */
    public ImpDataDetail(String alias) {
        this(DSL.name(alias), IMP_DATA_DETAIL);
    }

    /**
     * Create an aliased <code>public.imp_data_detail</code> table reference
     */
    public ImpDataDetail(Name alias) {
        this(alias, IMP_DATA_DETAIL);
    }

    /**
     * Create a <code>public.imp_data_detail</code> table reference
     */
    public ImpDataDetail() {
        this(DSL.name("imp_data_detail"), null);
    }

    public <O extends Record> ImpDataDetail(Table<O> child, ForeignKey<O, ImpDataDetailRecord> key) {
        super(child, key, IMP_DATA_DETAIL);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ImpDataDetailRecord> getPrimaryKey() {
        return Keys.IMP_DATA_DETAIL_PKEY;
    }

    @Override
    public List<UniqueKey<ImpDataDetailRecord>> getKeys() {
        return Arrays.<UniqueKey<ImpDataDetailRecord>>asList(Keys.IMP_DATA_DETAIL_PKEY);
    }

    @Override
    public ImpDataDetail as(String alias) {
        return new ImpDataDetail(DSL.name(alias), this);
    }

    @Override
    public ImpDataDetail as(Name alias) {
        return new ImpDataDetail(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ImpDataDetail rename(String name) {
        return new ImpDataDetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ImpDataDetail rename(Name name) {
        return new ImpDataDetail(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, String, String, Integer, Short, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
