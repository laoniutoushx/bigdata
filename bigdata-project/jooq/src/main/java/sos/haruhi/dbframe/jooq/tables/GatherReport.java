/*
 * This file is generated by jOOQ.
 */
package sos.haruhi.dbframe.jooq.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import sos.haruhi.dbframe.jooq.Keys;
import sos.haruhi.dbframe.jooq.Public;
import sos.haruhi.dbframe.jooq.tables.records.GatherReportRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GatherReport extends TableImpl<GatherReportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.gather_report</code>
     */
    public static final GatherReport GATHER_REPORT = new GatherReport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GatherReportRecord> getRecordType() {
        return GatherReportRecord.class;
    }

    /**
     * The column <code>public.gather_report.id</code>.
     */
    public final TableField<GatherReportRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.gather_report.call_number</code>.
     */
    public final TableField<GatherReportRecord, Integer> CALL_NUMBER = createField(DSL.name("call_number"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.gather_report.data_code</code>.
     */
    public final TableField<GatherReportRecord, String> DATA_CODE = createField(DSL.name("data_code"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.gather_report.data_count</code>.
     */
    public final TableField<GatherReportRecord, Long> DATA_COUNT = createField(DSL.name("data_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.gather_report.data_name</code>.
     */
    public final TableField<GatherReportRecord, String> DATA_NAME = createField(DSL.name("data_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.gather_report.data_type</code>.
     */
    public final TableField<GatherReportRecord, String> DATA_TYPE = createField(DSL.name("data_type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.gather_report.device_id</code>.
     */
    public final TableField<GatherReportRecord, String> DEVICE_ID = createField(DSL.name("device_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.gather_report.gather_cycle</code>.
     */
    public final TableField<GatherReportRecord, Integer> GATHER_CYCLE = createField(DSL.name("gather_cycle"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.gather_report.gather_ip</code>.
     */
    public final TableField<GatherReportRecord, String> GATHER_IP = createField(DSL.name("gather_ip"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.gather_report.last_time</code>.
     */
    public final TableField<GatherReportRecord, LocalDateTime> LAST_TIME = createField(DSL.name("last_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.gather_report.next_time</code>.
     */
    public final TableField<GatherReportRecord, LocalDateTime> NEXT_TIME = createField(DSL.name("next_time"), SQLDataType.LOCALDATETIME(6), this, "");

    private GatherReport(Name alias, Table<GatherReportRecord> aliased) {
        this(alias, aliased, null);
    }

    private GatherReport(Name alias, Table<GatherReportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.gather_report</code> table reference
     */
    public GatherReport(String alias) {
        this(DSL.name(alias), GATHER_REPORT);
    }

    /**
     * Create an aliased <code>public.gather_report</code> table reference
     */
    public GatherReport(Name alias) {
        this(alias, GATHER_REPORT);
    }

    /**
     * Create a <code>public.gather_report</code> table reference
     */
    public GatherReport() {
        this(DSL.name("gather_report"), null);
    }

    public <O extends Record> GatherReport(Table<O> child, ForeignKey<O, GatherReportRecord> key) {
        super(child, key, GATHER_REPORT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<GatherReportRecord> getPrimaryKey() {
        return Keys.GATHER_REPORT_PKEY;
    }

    @Override
    public List<UniqueKey<GatherReportRecord>> getKeys() {
        return Arrays.<UniqueKey<GatherReportRecord>>asList(Keys.GATHER_REPORT_PKEY);
    }

    @Override
    public GatherReport as(String alias) {
        return new GatherReport(DSL.name(alias), this);
    }

    @Override
    public GatherReport as(Name alias) {
        return new GatherReport(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GatherReport rename(String name) {
        return new GatherReport(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GatherReport rename(Name name) {
        return new GatherReport(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, Integer, String, Long, String, String, String, Integer, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
