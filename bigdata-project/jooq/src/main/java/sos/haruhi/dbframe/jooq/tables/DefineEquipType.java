/*
 * This file is generated by jOOQ.
 */
package sos.haruhi.dbframe.jooq.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import sos.haruhi.dbframe.jooq.Keys;
import sos.haruhi.dbframe.jooq.Public;
import sos.haruhi.dbframe.jooq.tables.records.DefineEquipTypeRecord;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DefineEquipType extends TableImpl<DefineEquipTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.define_equip_type</code>
     */
    public static final DefineEquipType DEFINE_EQUIP_TYPE = new DefineEquipType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DefineEquipTypeRecord> getRecordType() {
        return DefineEquipTypeRecord.class;
    }

    /**
     * The column <code>public.define_equip_type.type_id</code>.
     */
    public final TableField<DefineEquipTypeRecord, String> TYPE_ID = createField(DSL.name("type_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.define_equip_type.cate_code</code>.
     */
    public final TableField<DefineEquipTypeRecord, String> CATE_CODE = createField(DSL.name("cate_code"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.define_equip_type.cate_name</code>.
     */
    public final TableField<DefineEquipTypeRecord, String> CATE_NAME = createField(DSL.name("cate_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.define_equip_type.type_code</code>.
     */
    public final TableField<DefineEquipTypeRecord, String> TYPE_CODE = createField(DSL.name("type_code"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.define_equip_type.type_desc</code>.
     */
    public final TableField<DefineEquipTypeRecord, String> TYPE_DESC = createField(DSL.name("type_desc"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>public.define_equip_type.type_group</code>.
     */
    public final TableField<DefineEquipTypeRecord, String> TYPE_GROUP = createField(DSL.name("type_group"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.define_equip_type.type_icon</code>.
     */
    public final TableField<DefineEquipTypeRecord, String> TYPE_ICON = createField(DSL.name("type_icon"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>public.define_equip_type.type_major</code>.
     */
    public final TableField<DefineEquipTypeRecord, String> TYPE_MAJOR = createField(DSL.name("type_major"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.define_equip_type.type_name</code>.
     */
    public final TableField<DefineEquipTypeRecord, String> TYPE_NAME = createField(DSL.name("type_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.define_equip_type.version_code</code>.
     */
    public final TableField<DefineEquipTypeRecord, String> VERSION_CODE = createField(DSL.name("version_code"), SQLDataType.VARCHAR(255), this, "");

    private DefineEquipType(Name alias, Table<DefineEquipTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private DefineEquipType(Name alias, Table<DefineEquipTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.define_equip_type</code> table reference
     */
    public DefineEquipType(String alias) {
        this(DSL.name(alias), DEFINE_EQUIP_TYPE);
    }

    /**
     * Create an aliased <code>public.define_equip_type</code> table reference
     */
    public DefineEquipType(Name alias) {
        this(alias, DEFINE_EQUIP_TYPE);
    }

    /**
     * Create a <code>public.define_equip_type</code> table reference
     */
    public DefineEquipType() {
        this(DSL.name("define_equip_type"), null);
    }

    public <O extends Record> DefineEquipType(Table<O> child, ForeignKey<O, DefineEquipTypeRecord> key) {
        super(child, key, DEFINE_EQUIP_TYPE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<DefineEquipTypeRecord> getPrimaryKey() {
        return Keys.DEFINE_EQUIP_TYPE_PKEY;
    }

    @Override
    public List<UniqueKey<DefineEquipTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<DefineEquipTypeRecord>>asList(Keys.DEFINE_EQUIP_TYPE_PKEY);
    }

    @Override
    public DefineEquipType as(String alias) {
        return new DefineEquipType(DSL.name(alias), this);
    }

    @Override
    public DefineEquipType as(Name alias) {
        return new DefineEquipType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DefineEquipType rename(String name) {
        return new DefineEquipType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DefineEquipType rename(Name name) {
        return new DefineEquipType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
